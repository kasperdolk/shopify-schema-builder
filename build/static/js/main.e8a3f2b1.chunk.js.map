{"version":3,"sources":["components/OptionSetList.js","components/SettingItem.js","components/Options.js","components/AddSettingForm.js","components/EditOptions.js","components/EditSettingForm.js","components/helpers.js","components/SettingsModal.js","components/RenderSchemaModal.js","components/Block.js","components/Blocks.js","FakeItems.js","components/PageLayout.js","components/App.js","index.js"],"names":["OptionSetList","options","this","props","react_default","a","createElement","index_es","variation","map","optionSet","index","hasGroupProperty","hasOwnProperty","undefined","value","key","vertical","Fragment","group","label","Component","SettingItem","item","Object","keys","keyName","keyIndex","components_OptionSetList","Options","changeOption","input","_this","handleSettingChange","_this2","_this$props","settings","type","currentOptionSet","isLastItem","length","placeholder","onChange","changeType","attribute","onClick","removeOptionSet","sections","require","AddSettingForm","concat","toConsumableArray","option","additionalInputs","numberInputs","onSubmit","handleSubmit","components_Options","includes","idError","message","fieldID","EditOptions","inputType","EditSettingForm","settingItemTriggered","updateAndClose","allOptions","inputs","components_EditOptions","removeExtraneous","object","desiredKeys","newObject","forEach","property","SettingsModal","deleteItem","deleteSettingItem","settingItemTriggeredIndex","blockTriggeredIndex","blockIndex","handleClose","_this$props2","modalType","updatedSettingItem","objectSpread","settingItemWithoutExtraneous","updateSettingItem","settingItem","settingItemProperties","filter","addSettingItem","_this$props3","modalActive","open","onClose","title","charAt","toUpperCase","slice","primaryAction","content","onAction","secondaryActions","Section","components_EditSettingForm","components_AddSettingForm","RenderFieldModal","state","active","handleModalChange","setState","_ref","getFieldJSON","removeQuotesRegex","RegExp","activeFields","fields","reorderedItems","field","stringifiedFieldItems","JSON","stringify","replace","fieldItemsJSON","readOnly","Blocks","getSettings","blockValues","moveSettingItem","numSettings","push","duplicateSettingsItem","handleFieldChange","resourceName","singular","plural","items","renderItem","indexOf","Item","id","accessibilityLabel","shortcutActions","components_SettingItem","blockState","block0","addBlock","blocks","handleToggleClick","block","sectioned","Block","distribution","addFakeItems","components_SettingsModal","deleteBlock","ariaExpanded","ariaControls","alignment","min","max_blocks","FakeItems","info","types","PageLayout","settingItemTriggeredId","change","_this$state","settingItems","splice","allSettingIds","errorState","_ref2","_ref3","modalChangeType","selectedItem","_ref8","itemDetails","parse","_ref4","_ref5","_ref6","_ref7","_ref9","_ref10","_ref11","_ref12","setTimeout","Date","now","toString","arguments","_ref13","_this$state2","textFields","AnnotatedSection","description","string","components_Blocks","RenderSchemaModal","arrayMove","App","testMode","addSettingsItem","settingsItem","moveSettingsItem","destination","updateSettingsItem","updatedSettingsItem","deleteSettingsItem","fieldsWithRemoved","name","_this$state$fields","components_PageLayout","render","components_App","document","querySelector"],"mappings":"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","file":"static/js/main.e8a3f2b1.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport { TextStyle, Badge, Stack } from '@shopify/polaris';\n\nclass OptionSetList extends Component {\n\n  render() {\n    const { options } = this.props;\n    \n    if (!options) return false;\n      \n    return (\n      <div>\n        <TextStyle variation=\"strong\">{'Options:     '}</TextStyle>\n        {options.map((optionSet, index) => {\n          const hasGroupProperty = optionSet.hasOwnProperty('group');\n          if (optionSet.value === undefined) return false;\n          return (\n            <Badge key={'option' + index}>\n              <Stack vertical=\"true\">\n              <TextStyle variation=\"subdued\">\n                { hasGroupProperty && <><TextStyle variation=\"strong\">Group: </TextStyle>{ optionSet.group + ' '}</> }\n                <TextStyle variation=\"strong\">Value: </TextStyle>{optionSet.value + '     '}\n                <TextStyle variation=\"strong\">Label: </TextStyle>{optionSet.label}\n              </TextStyle> \n              </Stack>\n            </Badge>\n          )\n        })}\n      </div>\n    );\n  }\n}\n\nexport default OptionSetList;","import React, { Component } from 'react';\nimport { TextStyle } from '@shopify/polaris';\nimport OptionSetList from './OptionSetList.js';\n\nclass SettingItem extends Component {\n  render() {\n    const { item } = this.props;\n    return (\n      <div>\n        {Object.keys(item).map((keyName, keyIndex) => {\n          if (keyName === 'options') { return (\n            <h4 key={keyName}>\n              <OptionSetList options={item.options} />\n            </h4>\n          )};\n\n          return (\n            <h4 key={keyName}>\n             <TextStyle variation=\"strong\">{keyName + ':     '}</TextStyle>{item[keyName]}\n            </h4>\n          )\n        }) }\n    </div>\n    );\n  }\n}\n\nexport default SettingItem;","import React, { Component } from \"react\";\nimport { TextField, Stack, Button } from \"@shopify/polaris\";\nimport PropTypes from \"prop-types\";\n\nclass Options extends Component {\n  static propTypes = {\n    index: PropTypes.number,\n    type: PropTypes.string,\n    settings: PropTypes.array,\n    handleSettingChange: PropTypes.func,\n\n  };\n\n  changeOption = (input, index, value, options) => {\n    options[index][input] = value;\n    this.props.handleSettingChange(\"options\", options);\n  };\n\n  render() {\n    const { index, settings: { options }, type, handleSettingChange } = this.props;\n    const currentOptionSet = options[index];\n    const isLastItem = options.length - 1 === index;\n    const sharedInputs = [\"value\", \"label\"];\n    let group;\n\n    if (type === \"select\") {\n      group = (\n        <TextField\n          key={\"group\" + index}\n          placeholder=\"group\"\n          value={currentOptionSet[\"group\"]}\n          onChange={(value) => handleSettingChange({\n            changeType: 'editOption',\n            index, \n            attribute: \"group\" \n          },value)}          \n        />\n      );\n    }\n\n    return (\n      <Stack>\n        {group}\n        {sharedInputs.map(input => {\n          return (\n            <TextField\n              key={input}\n              placeholder={input}\n              value={currentOptionSet[input]}\n              onChange={(value) => handleSettingChange({\n                changeType: 'editOption',\n                index, \n                attribute: input \n              },value)}\n            />\n          );\n        })}\n        {isLastItem ? (\n          <Button onClick={() => handleSettingChange({ changeType: 'addOption' })} label=\"Add item\">+</Button>\n        ) : (\n          <Button onClick={() => {this.props.removeOptionSet(index)}} label=\"Add item\">-</Button>\n        )}\n      </Stack>\n    );\n  }\n}\n\nexport default Options;\n","import React, { Component } from 'react';\nimport { Stack, Form, Select, FormLayout, TextField, InlineError } from \"@shopify/polaris\";\nimport Options from './Options';\nimport PropTypes from \"prop-types\";\nconst sections = require(\"../sections.json\");\n\nclass AddSettingForm extends Component {\n\n  static propTypes = {\n    updateSettingItem: PropTypes.func,\n    updateAndClose: PropTypes.func,\n    handleSettingChange: PropTypes.func,\n    idError: PropTypes.bool,\n  }\n  \n  render() {\n    const { settings, handleSettingChange } = this.props;\n    const allOptions = [ 'Pick an Option', ...Object.keys(sections)];\n    const options = allOptions.map(option => { return { value: option, label: option }});\n    let additionalInputs = [];\n\n    if (settings.type !== 'Pick an Option') {\n      additionalInputs = (Object.keys(sections[settings.type]) || []);\n    }\n    const numberInputs = ['min', 'max', 'step'];\n\n    return (\n      <Form onSubmit={this.handleSubmit}>\n        <FormLayout>\n          <Stack vertical>\n            <Select\n              label=\"Input type\"\n              options={options}\n              onChange={value => handleSettingChange(\n                {\n                  changeType: \"editInput\",\n                  input: \"type\" \n                }\n              , value)}\n              value={ settings.type }\n            />\n\n            {additionalInputs.map(input => {\n              if (input === 'options') {\n                if (settings.options && settings.options.length > 0) {\n                  return (\n                    <div key={input}>\n                      <p>Options</p>\n                      {settings.options.map((item, index) => {\n                        return <Options \n                          key={index} \n                          index={index}\n                          type={settings.type}\n                          settings={settings} \n                          handleSettingChange={this.props.handleSettingChange}\n                        />\n                      })}\n                    </div>\n                  )\n                }\n              }\n\n              return (\n                <div key={input}>\n                  <TextField\n                    label={input}\n                    key={input}\n                    type={numberInputs.includes(input) ? 'number' : ''}\n                    value={settings[input]}\n                    onChange={value => handleSettingChange({\n                      changeType: 'editInput',\n                      input\n                    }, value)}\n                  /> \n                  {input === 'id' && this.props.idError && (\n                    <InlineError message=\"Setting ID must be unique and cannot be blank\" fieldID=\"settingID\" />\n                  )}\n                </div>\n              )  \n              })\n            }\n          </Stack>\n        </FormLayout>\n      </Form>\n    );\n  }\n}\n\nexport default AddSettingForm;","import React, { Component } from \"react\";\nimport { TextField, Stack, Button } from \"@shopify/polaris\";\nimport PropTypes from \"prop-types\";\n\nclass EditOptions extends Component {\n  static propTypes = {\n    index: PropTypes.number,\n    inputType: PropTypes.string,\n    options: PropTypes.object,\n    handleSettingChange: PropTypes.func,\n    isLastItem: PropTypes.bool,\n  }\n\n  render() {\n    const { inputType, options, index, handleSettingChange, isLastItem } = this.props;\n    const sharedInputs = [\"value\", \"label\"];\n    let group;\n\n    if (inputType === \"select\") {\n      group = (\n        <TextField\n          key={\"group\" + index}\n          placeholder=\"group\"\n          value={options[\"group\"]}\n          onChange={(value) => handleSettingChange({\n            changeType: 'editOption',\n            index, \n            attribute: \"group\" \n          }, value)}\n        />\n      );\n    }\n\n    return (\n        <div>\n      <Stack>\n        {group}\n\n        {sharedInputs.map(input => {\n          return (\n            <TextField\n              key={input + index}\n              placeholder={input}\n              value={options[input]}\n              onChange={(value) => handleSettingChange({\n                  changeType: 'editOption',\n                  index, \n                  attribute: input \n                }, \n              value)}\n            />\n          );\n        })}\n        {isLastItem ? (\n          <Button onClick={() => handleSettingChange({ changeType: 'addOption' })} label=\"Add item\">\n            +\n          </Button>\n        ) : (\n          <Button onClick={() => handleSettingChange({ changeType: 'removeOption', index })} label=\"Remove item\">\n            -\n          </Button>\n        )}      \n      </Stack>\n      </div>\n    );\n  }\n}\n\nexport default EditOptions;\n","import React, { Component } from \"react\";\nimport { Stack, Form, Select, FormLayout, TextField, InlineError } from \"@shopify/polaris\";\nimport PropTypes from \"prop-types\";\nimport EditOptions from \"./EditOptions\";\n\nconst sections = require(\"../sections.json\");\n\nclass EditSettingForm extends Component {\n  static propTypes = {\n    updateSettingItem: PropTypes.func,\n    settingItemTriggered: PropTypes.func,\n    updateAndClose: PropTypes.func,\n    handleSettingChange: PropTypes.func,\n    idError: PropTypes.bool,\n  }\n\n  render() {\n    const {\n      settingItemTriggered,\n      handleSettingChange,\n      updateAndClose,\n    } = this.props;\n\n    const allOptions = Object.keys(sections);\n    if (!allOptions) return false;\n    const options = allOptions.map(option => {\n      return { value: option, label: option };\n    });\n\n    if (!settingItemTriggered) return;\n\n    const inputs = Object.keys(sections[settingItemTriggered.type]);\n    const numberInputs = [\"min\", \"max\", \"step\"];\n\n    return (\n      <Form onSubmit={updateAndClose}>\n        <FormLayout>\n          <Stack vertical>\n            <Select\n              label=\"Input type\"\n              options={options}\n              onChange={value => handleSettingChange(\n                {\n                  changeType: \"editInput\",\n                  input: \"type\"\n                }\n              , value)}\n              value={settingItemTriggered.type}\n            />\n\n            {inputs.map(input => {\n              if (input === \"options\") {\n                if (!settingItemTriggered.options) return false;\n                return (\n                  <div key={input}>\n                    <p>Options</p>\n                      {settingItemTriggered.options.map((item, index) => {\n                        const isLastItem = settingItemTriggered.options.length - 1 === index;\n\n                      return (\n                        <EditOptions\n                          key={'option' + index}\n                          index={index}\n                          inputType={settingItemTriggered.type}\n                          options={settingItemTriggered.options[index]}\n                          handleSettingChange={handleSettingChange}\n                          isLastItem={isLastItem}\n                        />\n                      );\n                    })}\n                  </div>\n                )\n              }\n\n              return (\n                <div key={input}>\n                  <TextField\n                    label={input}\n                    key={input}\n                    type={numberInputs.includes(input) ? \"number\" : \"\"}\n                    value={settingItemTriggered[input]}\n                    onChange={value => handleSettingChange({\n                      changeType: 'editInput',\n                      input\n                    }, value)}\n                  />\n                  {input === 'id' && this.props.idError && (\n                    <InlineError message=\"Setting ID must be unique and cannot be blank\" fieldID=\"settingID\" />\n                  )}\n                </div>\n              );\n            })}\n          </Stack>\n        </FormLayout>\n      </Form>\n    );\n  }\n}\n\nexport default EditSettingForm;\n","export function removeExtraneous(object, desiredKeys) {\n  const newObject = {};\n\n  desiredKeys.forEach(property => { \n    if (object[property]) {\n      newObject[property] = object[property];\n    }\n  });   \n  return newObject;\n}\n\nexport function uppercaseFirst(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}","import React, { Component } from 'react';\nimport { Modal } from \"@shopify/polaris\";\nimport PropTypes from \"prop-types\";\nimport AddSettingForm from \"./AddSettingForm\";\nimport EditSettingForm from './EditSettingForm';\nimport { removeExtraneous } from './helpers';\n\nconst sections = require(\"../sections.json\");\n\nclass SettingsModal extends Component {\n  static propTypes = {\n    modalActive: PropTypes.bool,\n    handleClose: PropTypes.func,\n    modalType: PropTypes.string,\n    handleSettingChange: PropTypes.func,\n    updateSettingItem: PropTypes.func,\n    deleteSettingItem: PropTypes.func,\n    settingItemTriggered: PropTypes.object,\n    settingItemTriggeredIndex: PropTypes.number,\n    blockTriggeredIndex: PropTypes.number,\n    idError: PropTypes.bool,\n    settings: PropTypes.object,\n    addSettingItem: PropTypes.func,\n  }\n\n  deleteItem = () => {\n    const { deleteSettingItem, settingItemTriggeredIndex, blockTriggeredIndex } = this.props;\n    const blockIndex = blockTriggeredIndex >= 0 ? blockTriggeredIndex : undefined;    \n    deleteSettingItem(settingItemTriggeredIndex, blockTriggeredIndex);\n    this.props.handleClose(settingItemTriggeredIndex, blockIndex);\n  }\n  \n  updateAndClose = () => {\n    const { settingItemTriggeredIndex, settingItemTriggered, blockTriggeredIndex, modalType, settings } = this.props;\n    if (this.props.idError) return;\n    const blockIndex = blockTriggeredIndex >= 0 ? blockTriggeredIndex : undefined;\n\n    if (modalType === 'edit') {\n      const updatedSettingItem = {  ...settingItemTriggered };\n      const settingItemProperties = [ 'type', ...Object.keys(sections[updatedSettingItem.type])];\n      const settingItemWithoutExtraneous = removeExtraneous(updatedSettingItem, settingItemProperties);\n    \n      if (settingItemWithoutExtraneous.type === 'radio' && settingItemWithoutExtraneous.options) {\n        settingItemWithoutExtraneous.options = settingItemWithoutExtraneous.options.map(option => {\n          return removeExtraneous(option, ['value', 'label']);\n        });\n      }     \n      this.props.updateSettingItem(settingItemTriggeredIndex, settingItemWithoutExtraneous, blockIndex);\n    } else {\n      const settingItem = {};\n      const settingItemProperties = Object.keys(sections[settings.type]);\n\n      Object.keys(settings)\n        .filter(item => settingItemProperties.includes(item) || item === 'type')\n        .forEach(item => { settingItem[item] = settings[item];\n      });        \n      this.props.addSettingItem(settingItem, blockIndex);\n    }\n    \n    this.props.handleClose();\n  }\n\n  render() {\n    const { modalActive, modalType, handleClose } = this.props;\n    \n    return (\n      <Modal\n      open={modalActive}\n      onClose={handleClose}\n      title={`${modalType ? modalType.charAt(0).toUpperCase() + modalType.slice(1) : ''} Setting`}\n      primaryAction={{\n        content: \"Confirm\",\n        onAction: () => this.updateAndClose()\n      }}\n      secondaryActions={[\n        {\n          content: \"Delete item\",\n          onAction: this.deleteItem\n        }\n      ]}\n    >\n      <Modal.Section>\n        {modalType === 'edit' && \n          <EditSettingForm \n            updateSettingItem={this.props.updateSettingItem}\n            settingItemTriggered={this.props.settingItemTriggered}\n            updateAndClose={this.updateAndClose}\n            handleSettingChange={this.props.handleSettingChange}\n            idError={this.props.idError}\n          />\n        }\n        {modalType === 'duplicate' && \n          <AddSettingForm \n            updateSettingItem={this.props.updateSettingItem}\n            updateAndClose={this.updateAndClose}\n            handleSettingChange={this.props.handleSettingChange}\n            idError={this.props.idError}\n            settings={this.props.settings}      \n          />\n        }\n        {modalType === 'add' && \n          <AddSettingForm\n            updateSettingItem={this.props.updateSettingItem}\n            updateAndClose={this.updateAndClose}\n            handleSettingChange={this.props.handleSettingChange}\n            idError={this.props.idError}    \n            settings={this.props.settings}      \n          />     \n        }\n      </Modal.Section>\n    </Modal>\n    );\n  }\n}\n\nexport default SettingsModal;","import React, { Component } from \"react\";\nimport { Modal,  Button } from \"@shopify/polaris\";\nimport \"../css/styles.css\";\n\n\n\nclass RenderFieldModal extends Component {\n  state = {\n    active: false,\n  }\n\n  handleModalChange = () => {\n    this.setState(({ active }) => ({ active: !active }));\n  };\n\n  getFieldJSON = () => {\n    const removeQuotesRegex = new RegExp(/\"(min|max|step)\": \"(\\d*)\"/gi);\n    const { activeFields, fields } = this.props;\n\n    let reorderedItems = {};\n\n    activeFields.forEach(field => {\n      if (fields[field] && fields[field].length > 0 ) { reorderedItems[field] = fields[field]}\n    });\n\n    let stringifiedFieldItems = JSON.stringify(reorderedItems, null, 2)\n                                    .replace(removeQuotesRegex, '\"$1\": $2')\n\n\n    stringifiedFieldItems = `{% schema %}\\n` + stringifiedFieldItems + `\\n{% endschema %}`\n    \n    return stringifiedFieldItems;\n  }\n\n  render() {\n    const { active } = this.state;\n    const fieldItemsJSON = this.getFieldJSON();\n\n    return (\n      <div>\n        <Button onClick={this.handleModalChange}>Render JSON</Button>\n        <Modal\n          open={active}\n          onClose={this.handleModalChange}\n          title=\"Schema Section JSON\"\n          primaryAction={{\n            content: \"Close\",\n            onAction: this.handleModalChange\n          }}\n        >\n          <Modal.Section>\n            <textarea value={fieldItemsJSON} readOnly=\"readOnly\" ></textarea>\n          </Modal.Section>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nexport default RenderFieldModal;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { TextField, FormLayout, Form, ResourceList } from \"@shopify/polaris\";\nimport SettingItem from \"./SettingItem\";\n\nclass Blocks extends Component {\n\n  static propTypes = {\n    blockValues: PropTypes.object,\n    blockIndex: PropTypes.number,\n    updateSettingItem: PropTypes.func,\n    deleteSettingItem: PropTypes.func,\n    modalActive: PropTypes.bool,\n    handleModalChange: PropTypes.func,\n    settingItemTriggered: PropTypes.object,\n    settingItemTriggeredIndex: PropTypes.number,\n    handleFieldChange: PropTypes.func,\n    moveItem: PropTypes.func,\n  };    \n\n  getSettings = (index) => {\n    const settings = [];\n    const { blockValues, blockIndex, moveSettingItem } = this.props;\n    const numSettings = blockValues.settings.length;\n\n    if (index > 0) { \n      settings.push({\n        content: '↑', \n        onClick: () => moveSettingItem(index, index-1, blockIndex),\n      })\n    }\n    if (index !== numSettings - 1) { \n      settings.push({\n        content: '↓', \n        onClick: () => moveSettingItem(index, index+1, blockIndex),\n      })\n    }  \n    settings.push({\n      content: '⇉', \n      onClick: () => {\n        this.props.duplicateSettingsItem(index, blockIndex);\n        this.props.handleModalChange(index+1);\n      },\n    });     \n    return settings;\n  }\n\n  render() {\n    const activeFields = [\"type\", \"name\"];\n    const { blockValues, blockIndex } = this.props;\n    \n    return (\n      <div>\n        <Form>\n          <FormLayout>\n            {activeFields.map(field => {\n              return (\n                <TextField\n                  key={field}\n                  label={field}\n                  value={blockValues[field]}\n                  onChange={value => this.props.handleFieldChange(field, value, blockIndex)}\n                />\n              );\n            })}\n            Settings\n            <ResourceList\n              resourceName={{ singular: \"Setting\", plural: \"Settings\" }}\n              items={blockValues.settings}\n              renderItem={item => {\n                const index = blockValues.settings.indexOf(item);\n\n                if (item)\n                  return (\n                    <ResourceList.Item\n                      id={index}\n                      key={index}\n                      accessibilityLabel={`View details for ${item.id}`}\n                      onClick={() => this.props.handleModalChange('edit', index, blockIndex)}\n                      shortcutActions={this.getSettings(index)}\n                    >\n                      <SettingItem id={index} item={item} />\n                    </ResourceList.Item>\n                  );\n              }}\n            />\n          </FormLayout>\n        </Form>\n      </div>\n    );\n  }\n}\n\nexport default Blocks;\n","import React, { Component } from \"react\";\nimport PropTypes from \"prop-types\";\nimport { Button, Card, Collapsible, Stack, TextField } from \"@shopify/polaris\";\nimport Block from \"./Block\";\nimport SettingsModal from \"./SettingsModal\";\n\nclass Blocks extends Component {\n  state = {\n    blockState: {\n      block0: true,\n    },\n  };\n\n  static propTypes = {\n    blocks: PropTypes.array,\n    updateSettingItem: PropTypes.func,\n    deleteSettingItem: PropTypes.func,\n    modalActive: PropTypes.bool,\n    handleModalChange: PropTypes.func,\n    settingItemTriggered: PropTypes.object,\n    settingItemTriggeredIndex: PropTypes.number,\n    handleFieldChange: PropTypes.func,\n    moveSettingItem: PropTypes.func,\n    addBlock: PropTypes.func,\n  };    \n  \n  addBlock = () => {\n    const blockState =  { ...this.state.blockState };\n    this.props.addBlock();\n    blockState[`block${this.props.blocks.length - 1}`] = true\n    this.setState({ blockState });\n  }\n\n  handleToggleClick = (index) => {\n    const blockState =  { ...this.state.blockState };\n    blockState[`block${index}`] = !blockState[`block${index}`];\n    this.setState({ blockState });\n  };\n\n  render() {\n    const { blocks, handleFieldChange, handleModalChange } = this.props;\n    const { blockState } = this.state;\n\n    return (\n      <>\n        {blocks.map((block, index) => {\n          return (\n            <Card sectioned key={'block' + index} >            \n              <Collapsible open={blockState[`block${index}`]} id=\"basic-collapsible\">\n                <Block\n                  key={'item' + index}\n                  blockValues={block}\n                  blockIndex={index}\n                  updateSettingItem={this.props.updateSettingItem}\n                  deleteSettingItem={this.props.deleteSettingItem}\n                  moveSettingItem={this.props.moveSettingItem}\n                  duplicateSettingsItem={this.props.duplicateSettingsItem}                  \n                  modalActive={this.props.modalActive}\n                  handleModalChange={this.props.handleModalChange}\n                  settingItemTriggered={this.props.settingItemTriggered}\n                  settingItemTriggeredIndex={this.props.settingItemTriggeredIndex}\n                  handleSettingChange={this.handleSettingChange}              \n                  handleFieldChange={this.props.handleFieldChange}\n                  handleClose={this.handleClose}\n                  modalType={this.state.modalType}\n                  blockTriggeredIndex={this.state.blockTriggeredIndex}   \n                  idError={this.state.idError}    \n                  settings={this.state.settings}\n                  addSettingItem={this.props.addSettingItem}  \n                  fields={this.props.fields}\n                  />\n              </Collapsible>\n              <Stack distribution=\"center\">\n                {blockState[`block${index}`] && (                \n                  <>\n                    <Button onClick={() => this.props.addFakeItems(index)}>Add fake setting items</Button>\n\n                    <SettingsModal \n                      modalActive={this.state.modalActive}\n                      handleClose={this.handleClose}\n                      modalType={this.state.modalType}\n                      handleSettingChange={this.handleSettingChange}\n                      updateSettingItem={this.props.updateSettingItem}\n                      deleteSettingItem={this.props.deleteSettingItem}\n                      settingItemTriggered={this.state.settingItemTriggered}\n                      settingItemTriggeredIndex={this.state.settingItemTriggeredIndex}\n                      blockTriggeredIndex={this.state.blockTriggeredIndex}   \n                      idError={this.state.idError}    \n                      settings={this.state.settings}\n                      addSettingItem={this.props.addSettingItem}       \n                    />\n                  </>\n                )}\n                <Button onClick={() => this.props.deleteBlock(index)}>Delete Block</Button>\n                <Button onClick={() => handleModalChange('add', undefined, index)}>New Setting Item</Button>               \n                <Button\n                  onClick={() => this.handleToggleClick(index)}\n                  ariaExpanded={'open0'}\n                  ariaControls=\"basic-collapsible\"\n                  >\n                  { blockState[`block${index}`] ? '⇧' : '⇩'}\n                </Button>   \n              </Stack>           \n            </Card>\n            \n          )\n        })}\n\n        <Card sectioned>\n          <Stack distribution=\"center\"  alignment=\"trailing\">\n            <Button onClick={() => this.addBlock()}>Add New Block</Button>\n            { blocks.length > 0  && (\n              <TextField \n                key={'max_blocks'}\n                label={'Max Blocks'}\n                type=\"number\" \n                min=\"1\"\n                value={this.props.fields.max_blocks}\n                onChange={value => handleFieldChange('max_blocks', value)}\n                />\n              )}            \n            </Stack>\n        </Card>\n      </>\n    );\n  }\n}\n\nexport default Blocks;\n","const FakeItems = [\n  {\n    type: \"header\",\n    content: \"A header\"\n  },\n  {\n   type: \"select\",\n   id: \"id123\",\n   options: [\n     {\n       group: 'test group',\n       value: 'test value',\n       label: 'test label',\n     },\n     {\n       group: 'test group2',\n       value: 'test value2',\n       label: 'test label2',\n     }\n   ]\n  },\n  {\n   type: \"radio\",\n   id: \"radio1\",\n   options: [\n     {\n       value: 'radio value',\n       label: 'radio label',\n     }\n   ],\n  },\n  {\n   type: \"radio\",\n   id: \"number1\",\n   info: \"a number\"\n  },\n]\n\nexport default FakeItems;","import React, { Component } from \"react\";\nimport {\n  Layout,\n  Page,\n  ResourceList,\n  Card,\n  Button,\n  TextField,\n  FormLayout,\n  Form,\n  Stack,\n  TextContainer,\n} from \"@shopify/polaris\";\nimport PropTypes from \"prop-types\";\nimport SettingItem from \"./SettingItem\";\nimport SettingsModal from './SettingsModal'\nimport RenderSchemaModal from \"./RenderSchemaModal\";\nimport Blocks from \"./Blocks\";\nimport FakeItems from \"../FakeItems\";\nimport { uppercaseFirst } from './helpers';\n\nconst types = require(\"../types.json\");\n\nclass PageLayout extends Component {\n  state = {\n    modalActive: false,\n    modalType: '',\n    settingItemTriggered: {},\n    settingItemTriggeredIndex: undefined,\n    settingItemTriggeredId: '',\n    settings: { type: 'Pick an Option' },\n    blockTriggeredIndex: undefined,\n    idError: false,\n  };\n\n  static propTypes = {\n    type: PropTypes.string,\n    handleFieldChange: PropTypes.func,\n    fields: PropTypes.object,\n    settingItems: PropTypes.array,\n    blocks: PropTypes.array,\n    addSettingItem: PropTypes.func,\n    updateSettingItem: PropTypes.func,\n    deleteSettingItem: PropTypes.func,\n    moveSettingItem: PropTypes.func,\n    addBlock: PropTypes.func,\n    deleteBlock: PropTypes.func,\n  };\n\n  handleSettingChange = (change, value) => {\n    const { modalType, blockTriggeredIndex, settingItemTriggered } = this.state;\n    const { blocks, settingItems } = this.props;\n    const settings = modalType === 'edit' ? { ...settingItemTriggered } : { ...this.state.settings }\n    const changeType = change.changeType;\n\n    switch(changeType) {\n      case 'editOption':\n        settings.options[change.index][change.attribute] = value;\n        break;\n\n      case 'removeOption':\n        settings.options.splice(change.index, 1);\n        break;\n\n      case 'addOption':\n        settings.options.push({});\n        break;\n\n      case 'editInput':\n        const itemsWithoutId = ['header', 'paragraph'];\n        const itemsWithOptions = ['radio', 'select'];\n\n        if (change.input === 'type' && itemsWithoutId.includes(value)) {\n          this.setState(({ idError }) => ({ idError: false }));        \n        } \n        if (change.input === 'id') {\n          const allSettings = blockTriggeredIndex >= 0 ? blocks[blockTriggeredIndex].settings : settingItems;\n          const allSettingIds = allSettings.map(item => item.id).filter(item => item !== undefined);\n          let errorState = false;\n          if (allSettingIds && allSettingIds.includes(value) && value !== this.state.settingItemTriggeredId) errorState = true;\n          if (value === '') errorState = true;\n          \n          this.setState(({ idError }) => ({ idError: errorState }));        \n        }  \n\n        if (itemsWithOptions.includes(value)) {\n          settings.options = [{}];\n        }   \n\n        settings[change.input] = value;\n        break;\n      }\n\n    if (modalType === 'edit') {\n      this.setState(({ settingItemTriggered }) => ({ settingItemTriggered: settings }));        \n    } else {\n      this.setState(({ settings }));        \n    }\n  };\n\n  handleModalChange = (modalChangeType, index, blockIndex) => {\n    if (!this.state.modalActive && !['add', 'duplicate'].includes(modalChangeType)) {\n      let selectedItem;\n  \n      if (index >= 0) {\n        selectedItem = blockIndex >= 0 ? this.props.blocks[blockIndex].settings[index]\n          : selectedItem = this.props.settingItems[index];\n        \n        const itemDetails = JSON.parse(JSON.stringify(selectedItem));\n  \n        this.setState(({ settingItemTriggered }) => ({  settingItemTriggered: itemDetails  }));\n        this.setState(({ settingItemTriggeredIndex }) => ({  settingItemTriggeredIndex: index  })); \n        this.setState(({ settingItemTriggeredId }) => ({  settingItemTriggeredId: itemDetails.id  }));           \n        this.setState(({ idError }) => ({  idError: false  }));   \n      }\n    } else {\n      this.setState(({ idError }) => ({  idError: true  }));   \n    }\n\n    this.setState(({ blockTriggeredIndex }) => ({ blockTriggeredIndex: blockIndex }));  \n    this.setState(({ modalType }) => ({ modalType: modalChangeType }));\n    this.setState(({ modalActive }) => ({ modalActive: !modalActive }));\n  };\n\n  handleClose = () => {\n    this.setState(({ settings }) => ({ settings: { type: 'Pick an Option' } }));\n    this.handleModalChange();\n  };  \n\n  addFakeItems = (blockIndex) => {\n    FakeItems.forEach(item => {\n      setTimeout(() => {\n        if (item.id) { item.id = item.id + Date.now().toString() };\n        this.props.addSettingItem(item, blockIndex);\n      }, 200)\n    })\n  };\n\n  getSettings = (index, numSettings = this.props.settingItems.length) => {\n    const settings = [];\n    const { moveSettingItem } = this.props;\n\n    if (index > 0) { \n      settings.push({\n        content: '↑', \n        onClick: () => moveSettingItem(index, index-1),\n      })\n    }\n    if (index !== numSettings - 1) { \n      settings.push({\n        content: '↓', \n        onClick: () => moveSettingItem(index, index+1),\n      })\n    }    \n    settings.push({\n      content: \"⇉\", \n      onClick: () => {\n        this.duplicateSettingsItem(index);\n        this.handleModalChange('duplicate', index);\n      },\n    });\n\n    return settings;\n  }\n\n  duplicateSettingsItem = (index, blockIndex) => {\n    let selectedItem;\n\n    if (index >= 0) {\n      selectedItem = blockIndex >= 0 ? this.props.blocks[blockIndex].settings[index]\n        : selectedItem = this.props.settingItems[index];\n      \n      const itemDetails = JSON.parse(JSON.stringify(selectedItem));\n\n      this.setState(({ settings }) => ({\n        settings: itemDetails\n      }));\n    }\n  }\n\n  render() {\n    const activeFields = Object.keys(types[this.props.type]);\n    const { modalActive,\n            modalType,\n            settingItemTriggered,\n            settingItemTriggeredIndex,\n            blockTriggeredIndex,\n            idError,\n            settings,\n          } = this.state;\n\n    const textFields = [\"name\", \"class\", \"tag\"];\n    const { handleFieldChange, \n            settingItems,\n            deleteSettingItem,\n            updateSettingItem,\n            addSettingItem,\n            moveSettingItem,\n            fields,\n            blocks,\n            addBlock,\n            deleteBlock,      \n          } = this.props;\n\n    return (\n      <Page\n        title=\"Shopify Section Schema Generator\"\n      >\n        <Layout>\n          <Layout.AnnotatedSection\n            title=\"Section details\"\n            description=\"A number of the common section details here\"\n          >          \n            <Card sectioned>\n              <TextContainer>\n              <Form>\n                <FormLayout>\n                  {activeFields.map(field => {\n                    if (textFields.includes(field)) return (\n                      <TextField \n                      key={field}\n                      label={uppercaseFirst(field)} \n                      value={this.props.fields[field]}\n                      onChange={value => handleFieldChange(field, value)}\n                      />\n                    )\n                    return <p key={field}></p>\n                  })}        \n                </FormLayout>\n              </Form>\n              </TextContainer>\n            </Card>\n          </Layout.AnnotatedSection>\n\n         <Layout.AnnotatedSection\n            title=\"Settings\"\n            description=\"Fill out your section settings here\"\n          >         \n          <Card sectioned>\n\n            <ResourceList\n              resourceName={{ singular: \"Setting\", plural: \"Settings\" }}\n              items={settingItems}\n              renderItem={(item) => {\n                const index = settingItems.indexOf(item);\n                if (item)\n                  return (\n                    <ResourceList.Item\n                      id={item.id}\n                      accessibilityLabel={`View details for ${item.id}`}\n                      onClick={() => this.handleModalChange('edit', index)}\n                      shortcutActions={this.getSettings(index)}\n                    >\n                      <SettingItem id={index} item={item} />\n                    </ResourceList.Item>\n                  );\n              }}\n            />\n            \n            <Stack distribution=\"center\"  alignment=\"trailing\">\n              <Button onClick={() => this.handleModalChange('add')}>New Setting Item</Button>\n            </Stack>\n\n            <SettingsModal \n              modalActive={modalActive}\n              handleClose={this.handleClose}\n              modalType={modalType}\n              handleSettingChange={this.handleSettingChange}\n              updateSettingItem={updateSettingItem}\n              deleteSettingItem={deleteSettingItem}\n              settingItemTriggered={settingItemTriggered}\n              settingItemTriggeredIndex={settingItemTriggeredIndex}\n              blockTriggeredIndex={blockTriggeredIndex}   \n              idError={idError}    \n              settings={settings}\n              addSettingItem={addSettingItem}       \n            />\n\n          </Card>\n          </Layout.AnnotatedSection>          \n          <Layout.AnnotatedSection\n            title=\"Blocks\"\n            description=\"optional setting\"\n          >\n          { activeFields.includes('blocks') && (\n            <Blocks \n              modalActive={modalActive}\n              handleClose={this.handleClose}\n              modalType={modalType}\n              handleModalChange={this.handleModalChange}\n              handleSettingChange={this.handleSettingChange}\n              updateSettingItem={updateSettingItem}\n              deleteSettingItem={deleteSettingItem}\n              moveSettingItem={this.props.moveSettingItem}      \n              settingItemTriggered={settingItemTriggered}\n              settingItemTriggeredIndex={settingItemTriggeredIndex}\n              blockTriggeredIndex={blockTriggeredIndex}   \n              idError={idError}    \n              settings={settings}\n              addSettingItem={addSettingItem}  \n              handleFieldChange={handleFieldChange}  \n              fields={fields}\n              blocks={blocks} \n              addBlock={addBlock} \n              deleteBlock={deleteBlock}  \n              addFakeItems={this.addFakeItems}   \n            /> \n            )}\n          </Layout.AnnotatedSection>\n          <Layout.AnnotatedSection>  \n          <Card sectioned>\n              <Stack distribution=\"center\"  alignment=\"trailing\">\n\n                <RenderSchemaModal \n                  fields={this.props.fields} \n                  activeFields={Object.keys(types[this.props.type])}\n                />              \n              </Stack>\n          </Card>\n          </Layout.AnnotatedSection>\n        </Layout>\n      </Page>\n    );\n  }\n}\n\nexport default PageLayout;\n","import React, { Component } from \"react\";\nimport { AppProvider } from \"@shopify/polaris\";\nimport '@shopify/polaris/styles.css';\nimport PageLayout from './PageLayout';\nimport { removeExtraneous } from './helpers';\n\nconst arrayMove = require('array-move');\n\nclass App extends Component {\n  state = {\n    type: 'section',\n    fields: { settings: [], blocks: [] },\n    testMode: true,\n  };\n\n  addSettingsItem = (settingsItem, blockIndex) => {\n    const fields =  { ...this.state.fields };\n    if (blockIndex >= 0) {\n      fields.blocks[blockIndex].settings.push(settingsItem);\n    } else {\n      fields.settings.push(settingsItem);\n    }\n    this.setState({ fields });\n  };\n  \n  moveSettingsItem  = (index, destination, blockIndex = undefined) => {\n    let fields = { ...this.state.fields };\n    if (blockIndex >= 0) {\n      fields.blocks[blockIndex].settings = arrayMove(fields.blocks[blockIndex].settings, index, destination);\n    } else {\n      fields.settings = arrayMove(fields.settings, index, destination);\n    }\n    this.setState({ fields });\n  }\n\n  updateSettingsItem = (index, updatedSettingsItem, blockIndex) => {\n    const fields = { ...this.state.fields };\n    if (blockIndex >= 0) {\n      fields.blocks[blockIndex].settings[index] = updatedSettingsItem;\n      fields.blocks[blockIndex].settings[index].options = updatedSettingsItem.options;\n    } else {\n      fields.settings[index] = updatedSettingsItem;\n      fields.settings[index].options = updatedSettingsItem.options;\n    }\n    this.setState({ fields });\n  };\n\n  deleteSettingsItem = (index, blockIndex) => {\n    const fields = { ...this.state.fields };\n    if (blockIndex >= 0) {\n      fields.blocks[blockIndex].settings.splice(index, 1);\n    } else {\n      fields.settings.splice(index, 1);\n    }\n    this.setState({ fields });\n  };\n\n  handleFieldChange = (input, value, blockIndex) => {\n    const fields = {  ...this.state.fields };\n    blockIndex >= 0 ? fields.blocks[blockIndex][input] = value : fields[input] = value;\n    \n    if (value === '') { \n      const desiredFields = Object.keys(fields).filter(field => field !== input );\n      const fieldsWithRemoved = removeExtraneous(fields, desiredFields);\n      this.setState({ fields: fieldsWithRemoved });\n    } else {\n      this.setState({ fields });\n    }\n  }\n\n  addBlock = () => {\n    const fields =  { ...this.state.fields };\n    if (fields.blocks.length === 0) {\n      fields.max_blocks = 1;\n    }\n    fields.blocks.push({ type: '', name: '', settings: [] });\n    this.setState({ fields });\n  }\n\n  deleteBlock = (blockIndex) => {\n    const fields =  { ...this.state.fields };\n    fields.blocks.splice(blockIndex, 1);\n    if (fields.blocks.length === 0) {\n      const desiredFields = Object.keys(fields).filter(field => field !== 'max_blocks' );\n      const fieldsWithRemoved = removeExtraneous(fields, desiredFields); \n      this.setState({ fields: fieldsWithRemoved });    \n    } else {\n      this.setState({ fields });    \n    }\n  }\n\n  render() {\n    const { type, fields: { settings, blocks }, fields } = this.state;\n    return (\n      <AppProvider>\n        <PageLayout\n          type={type}\n          handleFieldChange={this.handleFieldChange}\n          fields={fields}\n          settingItems={settings}\n          blocks={blocks}\n          addSettingItem={this.addSettingsItem}\n          updateSettingItem={this.updateSettingsItem}\n          deleteSettingItem={this.deleteSettingsItem}\n          moveSettingItem={this.moveSettingsItem}\n          addBlock={this.addBlock}\n          deleteBlock={this.deleteBlock}\n        />\n      </AppProvider>\n    );\n  }\n}\n\nexport default App;","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./components/App\";\n\nrender(<App />, document.querySelector(\"#main\"));\n"],"sourceRoot":""}