{"version":3,"sources":["components/RenderSchemaModal.js","components/OptionSetList.js","components/SettingItem.js","components/SettingsSection.js","helpers.js","components/Block.js","components/Blocks.js","components/Options.js","components/AddSettingForm.js","components/EditOptions.js","components/EditSettingForm.js","components/SettingsModal.js","components/PageLayout.js","store.js","components/App.js","index.js"],"names":["RenderFieldModal","state","modalActive","handleModalChange","setState","getFieldJSON","removeQuotesRegex","RegExp","props","fields","settings","blocks","reorderedBlocks","length","map","id","reorderedObject","store","stringifiedFieldItems","JSON","stringify","replace","this","fieldItemsJSON","onClick","open","onClose","title","primaryAction","content","onAction","Section","value","readOnly","Component","connect","modal","error","OptionSetList","options","variation","optionSet","index","hasGroupProperty","hasOwnProperty","undefined","vertical","group","label","SettingItem","item","Object","keys","keyName","keyIndex","SettingsSection","getSettings","moveSetting","numSettings","storeSettings","push","resourceName","singular","plural","items","renderItem","indexOf","Item","accessibilityLabel","shortcutActions","showSettingsButton","distribution","alignment","dispatch","ownProps","destination","type","removeExtraneous","object","desiredKeys","newObject","forEach","property","uppercaseFirst","string","charAt","toUpperCase","slice","Block","field","updateField","blockValues","onChange","handleFieldChange","Blocks","Date","now","addBlock","addFields","addSetting","blockId","deleteBlock","deleteAllSettings","deleteAllFields","parseInt","isOpen","toggleBlock","block","sectioned","handleToggleClick","ariaExpanded","ariaControls","min","maxBlocks","updateMaxBlocks","setting","Options","changeOption","input","handleSettingChange","currentOptionSet","isLastItem","placeholder","changeType","attribute","removeOptionSet","sections","require","AddSettingForm","modalType","preloadData","option","additionalInputs","numberInputs","onSubmit","updateAndClose","includes","message","fieldID","settingItems","settingItemTriggered","errorState","EditOptions","inputType","EditSettingForm","allOptions","inputs","SettingsModal","deleteItem","deleteSetting","handleClose","change","newSettings","splice","setErrorState","closeModal","allSettings","allSettingIds","updatedSettingItem","settingItemWithoutExtraneous","updateSetting","settingItem","settingItemProperties","filter","secondaryActions","idError","updatedSetting","blockIndex","types","PageLayout","blockTriggeredIndex","modalChangeType","itemDetails","selectedItem","parse","modalEdit","duplicate","modalAdd","activeFields","textFields","mainFields","updateValue","AnnotatedSection","description","RenderSchemaModal","modalDuplicate","arrayMove","reducer","combineReducers","defaultState","movedSettings","action","updatedState","createStore","window","__REDUX_DEVTOOLS_EXTENSION__","App","render","document","querySelector"],"mappings":"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","file":"static/js/main.8ba1aa8a.chunk.js","sourcesContent":["import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal, Button } from \"@shopify/polaris\";\nimport \"../css/styles.css\";\nimport PropTypes from \"prop-types\";\n\nclass RenderFieldModal extends Component {\n  state = {\n    modalActive: false,\n  };\n\n  static propTypes = {\n    activeFields: PropTypes.array\n  }\n\n  handleModalChange = () => {\n    this.setState(({ modalActive }) => ({ modalActive: !modalActive }));\n  };\n\n  getFieldJSON = () => {\n    const removeQuotesRegex = new RegExp(/\"(min|max|step)\": \"(\\d*)\"/gi);\n    const { fields, settings, blocks } = this.props;\n\n    const reorderedBlocks =\n      blocks.length === 0\n        ? null\n        : blocks.map(({ id }) => {\n            return { ...fields[id], settings: settings[id] };\n          });\n\n    const reorderedObject = {\n      ...fields.store,\n      settings: settings.store,\n      ...(blocks.length > 0 && { blocks: reorderedBlocks }),\n    };\n\n    let stringifiedFieldItems = JSON.stringify(\n      reorderedObject,\n      null,\n      2\n    ).replace(removeQuotesRegex, '\"$1\": $2');\n\n    stringifiedFieldItems =\n      `{% schema %}\\n` + stringifiedFieldItems + `\\n{% endschema %}`;\n\n    return stringifiedFieldItems;\n  };\n\n  render() {\n    const { modalActive } = this.state;\n    const fieldItemsJSON = this.getFieldJSON();\n\n    return (\n      <div>\n        <Button onClick={this.handleModalChange}>Render JSON</Button>\n        <Modal\n          open={modalActive}\n          onClose={this.handleModalChange}\n          title=\"Schema Section JSON\"\n          primaryAction={{\n            content: \"Close\",\n            onAction: this.handleModalChange,\n          }}\n        >\n          <Modal.Section>\n            <textarea value={fieldItemsJSON} readOnly=\"readOnly\"></textarea>\n          </Modal.Section>\n        </Modal>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  settings: state.settings,\n  modal: state.modal,\n  error: state.error,\n  blocks: state.blocks,\n  fields: state.fields,\n});\n\nexport default connect(mapStateToProps)(RenderFieldModal);\n","import React, { Component } from 'react';\nimport { TextStyle, Badge, Stack } from '@shopify/polaris';\n\nclass OptionSetList extends Component {\n\n  render() {\n    const { options } = this.props;\n    \n    if (!options) return false;\n      \n    return (\n      <div>\n        <TextStyle variation=\"strong\">{'Options:     '}</TextStyle>\n        {options.map((optionSet, index) => {\n          const hasGroupProperty = optionSet.hasOwnProperty('group');\n          if (optionSet.value === undefined) return false;\n          return (\n            <Badge key={'option' + index}>\n              <Stack vertical=\"true\">\n              <TextStyle variation=\"subdued\">\n                { hasGroupProperty && <><TextStyle variation=\"strong\">Group: </TextStyle>{ optionSet.group + ' '}</> }\n                <TextStyle variation=\"strong\">Value: </TextStyle>{optionSet.value + '     '}\n                <TextStyle variation=\"strong\">Label: </TextStyle>{optionSet.label}\n              </TextStyle> \n              </Stack>\n            </Badge>\n          )\n        })}\n      </div>\n    );\n  }\n}\n\nexport default OptionSetList;","import React, { Component } from 'react';\nimport { TextStyle } from '@shopify/polaris';\nimport OptionSetList from './OptionSetList.js';\n\nclass SettingItem extends Component {\n  render() {\n    const { item } = this.props;\n    return (\n      <div>\n        {Object.keys(item).map((keyName, keyIndex) => {\n          if (keyName === 'options') { return (\n            <h4 key={keyName}>\n              <OptionSetList options={item.options} />\n            </h4>\n          )};\n\n          return (\n            <h4 key={keyName}>\n             <TextStyle variation=\"strong\">{keyName + ':     '}</TextStyle>{item[keyName]}\n            </h4>\n          )\n        }) }\n    </div>\n    );\n  }\n}\n\nexport default SettingItem;","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { Button, ResourceList, Stack } from \"@shopify/polaris\";\nimport SettingItem from \"./SettingItem\";\n\nclass SettingsSection extends Component {\n  static propTypes = {\n    id: PropTypes.string,\n    handleModalChange: PropTypes.func,\n    showSettingsButton: PropTypes.bool,\n  };\n\n  getSettings = (index) => {\n    const settings = [];\n    const { handleModalChange, id, moveSetting } = this.props;\n    const numSettings = this.props.storeSettings[this.props.id]\n      ? this.props.storeSettings[this.props.id].length\n      : 0;\n\n    if (numSettings === 0) return false;\n\n    if (index > 0) {\n      settings.push({\n        content: \"↑\",\n        onClick: () => moveSetting(index, index - 1),\n      });\n    }\n    if (index !== numSettings - 1) {\n      settings.push({\n        content: \"↓\",\n        onClick: () => moveSetting(index, index + 1),\n      });\n    }\n    settings.push({\n      // TODO: make this a better duplicate icon\n      content: \"⇉\",\n      onClick: () => handleModalChange(\"duplicate\", id, index),\n    });\n\n    return settings;\n  };\n\n  render() {\n    const { storeSettings, handleModalChange, id } = this.props;\n    let settings = storeSettings[id];\n\n    return (\n      <>\n        {settings && settings.length > 0 && (\n          <ResourceList\n            resourceName={{ singular: \"Setting\", plural: \"Settings\" }}\n            items={settings}\n            renderItem={(item) => {\n              const index = settings.indexOf(item);\n              if (item)\n                return (\n                  <ResourceList.Item\n                    id={item.id}\n                    accessibilityLabel={`View details for ${item.id}`}\n                    onClick={() => handleModalChange(\"edit\", id, index)}\n                    shortcutActions={this.getSettings(index)}\n                  >\n                    <SettingItem id={index} item={item} />\n                  </ResourceList.Item>\n                );\n            }}\n          />\n        )}\n\n        {this.props.showSettingsButton && (\n          <Stack distribution=\"center\" alignment=\"trailing\">\n            <Button onClick={() => handleModalChange(\"add\", id)}>\n              New Setting Item\n            </Button>\n          </Stack>\n        )}\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  storeSettings: state.settings,\n  modal: state.modal,\n  error: state.error,\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {     \n    moveSetting: (index, destination) => dispatch({ \n      type: \"MOVE_SETTING\", \n      index, \n      destination, \n      id: ownProps.id\n    })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsSection);\n","export function removeExtraneous(object, desiredKeys) {\n  const newObject = {};\n\n  desiredKeys.forEach(property => { \n    if (object[property]) {\n      newObject[property] = object[property];\n    }\n  });   \n  return newObject;\n}\n\nexport function uppercaseFirst(string) {\n  return string.charAt(0).toUpperCase() + string.slice(1);\n}","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { TextField, FormLayout, Form } from \"@shopify/polaris\";\nimport SettingsSection from \"./SettingsSection\";\nimport { uppercaseFirst } from \"../helpers\";\n\nclass Block extends Component {\n  static propTypes = {\n    blockValues: PropTypes.object,\n    id: PropTypes.string,\n    handleModalChange: PropTypes.func,\n  };\n\n  handleFieldChange(field, value) {\n    this.props.updateField(field, value);\n  }\n\n  render() {\n    const activeFields = [\"type\", \"name\"];\n    const { handleModalChange, fields, id } = this.props;\n    const blockValues = fields[id] || {};\n\n    return (\n      <div>\n        <Form>\n          <FormLayout>\n            {activeFields.map((field) => {\n              return (\n                <TextField\n                  key={field}\n                  label={uppercaseFirst(field)}\n                  value={blockValues[field]}\n                  onChange={(value) => this.handleFieldChange(field, value)}\n                />\n              );\n            })}\n            Settings\n            <SettingsSection\n              handleModalChange={handleModalChange}\n              id={id}\n              showSettingsButton={false}\n            />\n          </FormLayout>\n        </Form>\n      </div>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  modal: state.modal,\n  error: state.error,\n  settings: state.settings.blocks,\n  blocks: state.blocks,\n  fields: state.fields,\n});\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    updateField: (field, value) => dispatch({\n      type: \"UPDATE_FIELD\",\n      field,\n      value,\n      id: ownProps.id,      \n    })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Block);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport PropTypes from \"prop-types\";\nimport { Button, Card, Collapsible, Stack, TextField } from \"@shopify/polaris\";\nimport Block from \"./Block\";\n\nclass Blocks extends Component {\n  static propTypes = {\n    handleModalChange: PropTypes.func,\n  };\n\n  addBlock() {\n    const id = `block_${Date.now()}`;\n    this.props.addBlock(id);\n    this.props.addFields(id);\n    this.props.addSetting(id);\n  }\n\n  deleteBlock(index, blockId) {\n    this.props.deleteBlock(index);\n    this.props.deleteAllSettings(blockId);\n    this.props.deleteAllFields(blockId);\n  }\n\n  updateMaxBlocks(value) {\n    this.props.updateField(\"maxBlocks\", parseInt(value));\n  }\n\n  handleToggleClick(index, isOpen) {\n    this.props.toggleBlock(index, isOpen);\n  }\n\n  render() {\n    const { blocks, fields, handleModalChange } = this.props;\n\n    return (\n      <>\n        {blocks.map((block, index) => {\n          return (\n            <Card sectioned key={block.id}>\n              <Collapsible open={block.isOpen} id=\"basic-collapsible\">\n                <Block\n                  key={block.id}\n                  blockValues={block}\n                  id={block.id}\n                  handleModalChange={handleModalChange}\n                />\n              </Collapsible>\n              <Stack distribution=\"center\">\n                <Button onClick={() => this.deleteBlock(index, block.id)}>\n                  Delete Block\n                </Button>\n                <Button onClick={() => handleModalChange(\"add\", block.id)}>\n                  New Setting Item\n                </Button>\n                <Button\n                  onClick={() => this.handleToggleClick(index, !block.isOpen)}\n                  ariaExpanded={\"open0\"}\n                  ariaControls=\"basic-collapsible\"\n                >\n                  {block.isOpen ? \"⇧\" : \"⇩\"}\n                </Button>\n              </Stack>\n            </Card>\n          );\n        })}\n\n        <Card sectioned>\n          <Stack distribution=\"center\" alignment=\"trailing\">\n            <Button onClick={() => this.addBlock()}>Add New Block</Button>\n            {blocks.length > 0 && (\n              <TextField\n                key={\"max_blocks\"}\n                label={\"Max Blocks\"}\n                type=\"number\"\n                min=\"1\"\n                value={fields.store.maxBlocks}\n                onChange={(value) => this.updateMaxBlocks(value)}\n              />\n            )}\n          </Stack>\n        </Card>\n      </>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  storeSettings: state.settings.blocks,\n  modal: state.modal,\n  error: state.error,\n  blocks: state.blocks,\n  fields: state.fields,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {     \n    addBlock: (id ) => dispatch({ type: 'ADD_BLOCK', id }),\n    addFields: (id ) => dispatch({ type: 'ADD_FIELDS', id }),\n    addSetting: (id ) => dispatch({ type: 'ADD_SETTING', id }),\n    updateField: (field, value) => dispatch({ type: \"UPDATE_FIELD\", field, value }),\n    toggleBlock: (index, isOpen) => dispatch({ type: 'TOGGLE_BLOCK', index, setting: isOpen }),\n    deleteBlock: (index ) => dispatch({ type: 'DELETE_BLOCK', index }),\n    deleteAllSettings: (id) =>dispatch({ type:'DELETE_ALL_SETTINGS', id }),\n    deleteAllFields: (id) => dispatch({ type: 'DELETE_ALL_FIELDS', id }),\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Blocks);\n","import React, { Component } from \"react\";\nimport { TextField, Stack, Button } from \"@shopify/polaris\";\nimport PropTypes from \"prop-types\";\n\nclass Options extends Component {\n  static propTypes = {\n    index: PropTypes.number,\n    type: PropTypes.string,\n    settings: PropTypes.object,\n    handleSettingChange: PropTypes.func,\n\n  };\n\n  changeOption = (input, index, value, options) => {\n    options[index][input] = value;\n    this.props.handleSettingChange(\"options\", options);\n  };\n\n  render() {\n    const { index, settings: { options }, type, handleSettingChange } = this.props;\n    const currentOptionSet = options[index];\n    const isLastItem = options.length - 1 === index;\n    const sharedInputs = [\"value\", \"label\"];\n    let group;\n\n    if (type === \"select\") {\n      group = (\n        <TextField\n          key={\"group\" + index}\n          placeholder=\"group\"\n          value={currentOptionSet[\"group\"]}\n          onChange={(value) => handleSettingChange({\n            changeType: 'editOption',\n            index, \n            attribute: \"group\" \n          },value)}          \n        />\n      );\n    }\n\n    return (\n      <Stack>\n        {group}\n        {sharedInputs.map(input => {\n          return (\n            <TextField\n              key={input}\n              placeholder={input}\n              value={currentOptionSet[input]}\n              onChange={(value) => handleSettingChange({\n                changeType: 'editOption',\n                index, \n                attribute: input \n              },value)}\n            />\n          );\n        })}\n        {isLastItem ? (\n          <Button onClick={() => handleSettingChange({ changeType: 'addOption' })} label=\"Add item\">+</Button>\n        ) : (\n          <Button onClick={() => {this.props.removeOptionSet(index)}} label=\"Add item\">-</Button>\n        )}\n      </Stack>\n    );\n  }\n}\n\nexport default Options;\n","import React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Stack, Form, Select, FormLayout, TextField, InlineError } from \"@shopify/polaris\";\nimport Options from './Options';\nimport PropTypes from \"prop-types\";\nconst sections = require(\"../sections.json\");\n\nclass AddSettingForm extends Component {\n\n  static propTypes = {\n    preloadData: PropTypes.object,\n    settings: PropTypes.object, \n    updateAndClose: PropTypes.func,\n    handleSettingChange: PropTypes.func,\n    idError: PropTypes.bool,\n  }\n\n  componentDidMount() {\n    if (this.props.modal.modalType === 'duplicate') {\n      this.props.preloadData(this.props.modal.item)\n    }\n  }\n\n  render() {\n    const { settings, handleSettingChange } = this.props;\n    const allOptions = [ 'Pick an Option', ...Object.keys(sections)];\n    const options = allOptions.map(option => { return { value: option, label: option }});\n    let additionalInputs = [];\n\n    if (settings.type !== 'Pick an Option') {\n      additionalInputs = (Object.keys(sections[settings.type]) || []);\n    }\n    const numberInputs = ['min', 'max', 'step'];\n\n    return (\n      <Form onSubmit={this.updateAndClose}>\n        <FormLayout>\n          <Stack vertical>\n            <Select\n              label=\"Input type\"\n              options={options}\n              onChange={value => handleSettingChange(\n                {\n                  changeType: \"editInput\",\n                  input: \"type\" \n                }\n              , value)}\n              value={ settings.type }\n            />\n\n            {additionalInputs.map(input => {\n              if (input === 'options') {\n                if (settings.options && settings.options.length > 0) {\n                  return (\n                    <div key={input}>\n                      <p>Options</p>\n                      {settings.options.map((item, index) => {\n                        return <Options \n                          key={index} \n                          index={index}\n                          type={settings.type}\n                          settings={settings} \n                          handleSettingChange={this.props.handleSettingChange}\n                        />\n                      })}\n                    </div>\n                  )\n                }\n              }\n\n              return (\n                <div key={input}>\n                  <TextField\n                    label={input}\n                    key={input}\n                    type={numberInputs.includes(input) ? 'number' : ''}\n                    value={settings[input]}\n                    onChange={value => handleSettingChange({\n                      changeType: 'editInput',\n                      input\n                    }, value)}\n                  /> \n                  {input === 'id' && this.props.error && (\n                    <InlineError message=\"Setting ID must be unique and cannot be blank\" fieldID=\"settingID\" />\n                  )}\n                </div>\n              )  \n              })\n            }\n          </Stack>\n        </FormLayout>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({ \n  settingItems: state.settings,\n  settingItemTriggered: state.modal.item,\n  modal: state.modal,\n  modalType: state.modal.modalType,\n  error: state.error.errorState\n})\n\nexport default connect(mapStateToProps)(AddSettingForm);","import React, { Component } from \"react\";\nimport { TextField, Stack, Button } from \"@shopify/polaris\";\nimport PropTypes from \"prop-types\";\n\nclass EditOptions extends Component {\n  static propTypes = {\n    index: PropTypes.number,\n    inputType: PropTypes.string,\n    options: PropTypes.object,\n    handleSettingChange: PropTypes.func,\n    isLastItem: PropTypes.bool,\n  }\n\n  render() {\n    const { inputType, options, index, handleSettingChange, isLastItem } = this.props;\n    const sharedInputs = [\"value\", \"label\"];\n    let group;\n\n    if (inputType === \"select\") {\n      group = (\n        <TextField\n          key={\"group\" + index}\n          placeholder=\"group\"\n          value={options[\"group\"]}\n          onChange={(value) => handleSettingChange({\n            changeType: 'editOption',\n            index, \n            attribute: \"group\" \n          }, value)}\n        />\n      );\n    }\n\n    return (\n        <div>\n      <Stack>\n        {group}\n\n        {sharedInputs.map(input => {\n          return (\n            <TextField\n              key={input + index}\n              placeholder={input}\n              value={options[input]}\n              onChange={(value) => handleSettingChange({\n                  changeType: 'editOption',\n                  index, \n                  attribute: input \n                }, \n              value)}\n            />\n          );\n        })}\n        {isLastItem ? (\n          <Button onClick={() => handleSettingChange({ changeType: 'addOption' })} label=\"Add item\">\n            +\n          </Button>\n        ) : (\n          <Button onClick={() => handleSettingChange({ changeType: 'removeOption', index })} label=\"Remove item\">\n            -\n          </Button>\n        )}      \n      </Stack>\n      </div>\n    );\n  }\n}\n\nexport default EditOptions;\n","import React, { Component } from \"react\";\nimport { connect } from 'react-redux';\nimport { Stack, Form, Select, FormLayout, TextField, InlineError } from \"@shopify/polaris\";\nimport PropTypes from \"prop-types\";\nimport EditOptions from \"./EditOptions\";\n\nconst sections = require(\"../sections.json\");\n\nclass EditSettingForm extends Component {\n\n  static propTypes = {\n    updateSettingItem: PropTypes.func,\n    handleSettingChange: PropTypes.func,\n    updateAndClose: PropTypes.func,\n    idError: PropTypes.bool,\n  }\n\n  componentDidMount() {\n    this.props.preloadData(this.props.modal.item)\n  }\n\n  render() {\n    const { settingItemTriggered, handleSettingChange, settings } = this.props;\n\n    const allOptions = Object.keys(sections);\n    if (!allOptions) return false;\n    const options = allOptions.map(option => {\n      return { value: option, label: option };\n    });\n\n    if (!this.props.modal.modalActive || !settingItemTriggered) return false;\n\n    const inputs = Object.keys(sections[settingItemTriggered.type]);\n    const numberInputs = [\"min\", \"max\", \"step\"];\n\n    return (\n      <Form>\n        <FormLayout>\n          <Stack vertical>\n            <Select\n              label=\"Input type\"\n              options={options}\n              onChange={value => handleSettingChange(\n                {\n                  changeType: \"editInput\",\n                  input: \"type\"\n                }\n              , value)}\n              value={settings.type}\n            />\n\n            {inputs.map(input => {\n              if (input === \"options\") {\n                if (!settings.options) return false;\n                return (\n                  <div key={input}>\n                    <p>Options</p>\n                      {settings.options.map((item, index) => {\n                        const isLastItem = settings.options.length - 1 === index;\n\n                      return (\n                        <EditOptions\n                          key={'option' + index}\n                          index={index}\n                          inputType={settings.type}\n                          options={settings.options[index]}\n                          handleSettingChange={handleSettingChange}\n                          isLastItem={isLastItem}\n                        />\n                      );\n                    })}\n                  </div>\n                )\n              }\n\n              return (\n                <div key={input}>\n                  <TextField\n                    label={input}\n                    key={input}\n                    type={numberInputs.includes(input) ? \"number\" : \"\"}\n                    value={settings[input]}\n                    onChange={value => handleSettingChange({\n                      changeType: 'editInput',\n                      input\n                    }, value)}\n                  />\n                  {input === 'id' && this.props.errorState && (\n                    <InlineError message=\"Setting ID must be unique and cannot be blank\" fieldID=\"settingID\" />\n                  )}\n                </div>\n              );\n            })}\n          </Stack>\n        </FormLayout>\n      </Form>\n    );\n  }\n}\n\nconst mapStateToProps = state => ({ \n  settingItems: state.settings,\n  settingItemTriggered: state.modal.item,\n  modalType: state.modal.modalType,\n  modal: state.modal,\n  error: state.error\n})\n\nexport default connect(mapStateToProps)(EditSettingForm);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport { Modal } from \"@shopify/polaris\";\nimport AddSettingForm from \"./AddSettingForm\";\nimport EditSettingForm from \"./EditSettingForm\";\nimport { removeExtraneous, uppercaseFirst } from \"../helpers\";\n\nconst sections = require(\"../sections.json\");\n\nclass SettingsModal extends Component {\n  state = {\n    settings: { type: \"Pick an Option\" },\n  };\n\n  deleteItem = () => {\n    const {\n      modal: { id, index },\n    } = this.props;\n\n    this.props.deleteSetting(id, index);\n\n    this.handleClose();\n  };\n\n  handleSettingChange = (change, value) => {\n    const newSettings = { ...this.state.settings };\n    const changeType = change.changeType;\n\n    switch (changeType) {\n      case \"editOption\":\n        newSettings.options[change.index][change.attribute] = value;\n        break;\n\n      case \"removeOption\":\n        newSettings.options.splice(change.index, 1);\n        break;\n\n      case \"addOption\":\n        newSettings.options.push({});\n        break;\n\n      case \"editInput\":\n        const itemsWithOptions = [\"radio\", \"select\"];\n\n        if (itemsWithOptions.includes(value)) {\n          newSettings.options = [{}];\n        }\n\n        newSettings[change.input] = value;\n        break;\n\n      default:\n        return false;\n    }\n\n    this.setState(({ settings }) => ({ settings: newSettings }));\n  };\n\n  updateAndClose() {\n    const {\n      error,\n      allSettings,\n      modal: { modalType, index, id },\n    } = this.props;\n    const { settings } = this.state;\n\n    let errorState = false;\n    const allSettingIds = allSettings.map((setting) => setting.id);\n\n    // add error checking for block IDs\n    if (modalType !== \"edit\") {\n      if (\n        allSettingIds.includes(settings.id) ||\n        !settings.id ||\n        settings.id === \"\"\n      )\n        errorState = true;\n      if (error.errorState !== errorState) {\n        this.props.setErrorState(errorState);\n      }\n    }\n\n    if (errorState) return;\n\n    if (modalType === \"edit\") {\n      const updatedSettingItem = settings;\n      const settingItemProperties = [\n        \"type\",\n        ...Object.keys(sections[updatedSettingItem.type]),\n      ];\n      const settingItemWithoutExtraneous = removeExtraneous(\n        updatedSettingItem,\n        settingItemProperties\n      );\n\n      if (\n        settingItemWithoutExtraneous.type === \"radio\" &&\n        settingItemWithoutExtraneous.options\n      ) {\n        settingItemWithoutExtraneous.options = settingItemWithoutExtraneous.options.map(\n          (option) => {\n            return removeExtraneous(option, [\"value\", \"label\"]);\n          }\n        );\n      }\n\n      this.props.updateSetting(settingItemWithoutExtraneous, index, id)\n    } else {\n      const settingItem = {};\n      const settingItemProperties = Object.keys(sections[settings.type]);\n\n      Object.keys(settings)\n        .filter(\n          (item) => settingItemProperties.includes(item) || item === \"type\"\n        )\n        .forEach((item) => {\n          settingItem[item] = settings[item];\n        });\n\n      this.props.addSetting(settingItem, id);\n    }\n\n    this.handleClose();\n  }\n\n  handleClose = () => {\n    this.props.setErrorState(false);\n\n    this.props.closeModal();\n    this.setState(({ settings }) => ({ settings: { type: \"Pick an Option\" } }));\n  };\n\n  render() {\n    const {\n      modal: { modalActive, modalType },\n    } = this.props;\n\n    if (!modalActive || !modalType) return false;\n\n\n    return (\n      <Modal\n        open={modalActive}\n        onClose={this.handleClose}\n        title={`${modalType ? uppercaseFirst(modalType) : \"\"} Setting`}\n        primaryAction={{\n          content: \"Confirm\",\n          onAction: () => this.updateAndClose(),\n        }}\n        secondaryActions={modalType === 'edit' && [\n          {\n            content: \"Delete item\",\n            onAction: this.deleteItem,\n          },\n        ]}\n      >\n        <Modal.Section>\n          {modalType === \"edit\" && (\n            <EditSettingForm\n              preloadData={(newSettings) =>\n                this.setState(({ settings }) => ({ settings: newSettings }))\n              }\n              settingItemTriggered={this.props.settingItemTriggered}\n              updateAndClose={this.updateAndClose}\n              settings={this.state.settings}\n              handleSettingChange={this.handleSettingChange}\n              idError={this.props.idError}\n            />\n          )}\n          {modalType === \"duplicate\" && (\n            <AddSettingForm\n              preloadData={(newSettings) =>\n                this.setState(({ settings }) => ({ settings: newSettings }))\n              }\n              updateAndClose={this.updateAndClose}\n              handleSettingChange={this.handleSettingChange}\n              idError={this.props.idError}\n              settings={this.state.settings}\n            />\n          )}\n          {modalType === \"add\" && (\n            <AddSettingForm\n              updateAndClose={this.updateAndClose}\n              handleSettingChange={this.handleSettingChange}\n              idError={this.props.idError}\n              settings={this.state.settings}\n            />\n          )}\n        </Modal.Section>\n      </Modal>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  modal: state.modal,\n  error: state.error,\n  allSettings: state.settings.store,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    deleteSetting: (id, index) => dispatch({ type: 'DELETE_SETTING', id, index}),\n    setErrorState: (errorState) => dispatch({ type: 'SET_ERROR_STATE', errorState }),\n    updateSetting: (updatedSetting, index, id) => dispatch({ \n      type: \"UPDATE_SETTING\",\n      setting: updatedSetting,\n      index,\n      id,\n    }),\n    addSetting: (setting, id) => dispatch({\n      type: \"ADD_SETTING\", \n      setting,\n      id,\n    }),\n    closeModal: () => dispatch({\n      type: \"MODAL_ACTIVE\",\n      modalActive: false,\n      modalType: null,\n      item: null,\n      index: null,\n      blockIndex: null,\n      id: null\n    })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(SettingsModal);\n","import React, { Component } from \"react\";\nimport { connect } from \"react-redux\";\nimport {\n  Layout,\n  Page,\n  Card,\n  TextField,\n  FormLayout,\n  Form,\n  Stack,\n  TextContainer,\n} from \"@shopify/polaris\";\nimport RenderSchemaModal from \"./RenderSchemaModal\";\nimport Blocks from \"./Blocks\";\nimport SettingsSection from \"./SettingsSection\";\nimport SettingsModal from \"./SettingsModal\";\nimport { uppercaseFirst } from \"../helpers\";\n\nconst types = require(\"../types.json\");\n\nclass PageLayout extends Component {\n  state = {\n    modalActive: false,\n    modalType: \"\",\n    settingItemTriggered: {},\n    settings: { type: \"Pick an Option\" },\n    blockTriggeredIndex: undefined,\n    idError: false,\n  };\n\n  handleModalChange = (modalChangeType, id, index) => {\n    let itemDetails, selectedItem;\n    if ([\"edit\", \"duplicate\"].includes(modalChangeType)) {\n      selectedItem = this.props.storeSettings[id][index];\n    }\n\n    itemDetails = selectedItem\n      ? JSON.parse(JSON.stringify(selectedItem))\n      : null;\n\n    switch (modalChangeType) {\n      case \"edit\":\n        this.props.modalEdit(itemDetails, index, id);\n        break;\n      case \"duplicate\":\n        this.props.duplicate(itemDetails, id);\n        break;\n\n      case \"add\":\n        this.setState(({ idError }) => ({ idError: true }));\n        this.props.setErrorState(false);\n        this.props.modalAdd(id);\n        break;\n      default:\n        return false;\n    }\n  };\n\n  render() {\n    // TODO: integrate other 'types' of schema objects\n    const activeFields = Object.keys(types[\"section\"]);\n\n    const textFields = [\"name\", \"class\", \"tag\"];\n    const { mainFields, updateValue } = this.props;\n\n    return (\n      <Page title=\"Shopify Section Schema Generator\">\n        <Layout>\n          <Layout.AnnotatedSection\n            title=\"Section details\"\n            description=\"A number of the common section details here\"\n          >\n            <Card sectioned>\n              <TextContainer>\n                <Form>\n                  <FormLayout>\n                    {activeFields.map((field) => {\n                      if (textFields.includes(field))\n                        return (\n                          <TextField\n                            key={field}\n                            label={uppercaseFirst(field)}\n                            value={mainFields[field]}\n                            onChange={(value) => updateValue(field, value)}\n                          />\n                        );\n                      return <p key={field}></p>;\n                    })}\n                  </FormLayout>\n                </Form>\n              </TextContainer>\n            </Card>\n          </Layout.AnnotatedSection>\n\n          <Layout.AnnotatedSection\n            title=\"Settings\"\n            description=\"Fill out your section settings here\"\n          >\n            <Card sectioned>\n              <SettingsSection\n                id={\"store\"}\n                handleModalChange={this.handleModalChange}\n                showSettingsButton={true}\n              />\n            </Card>\n          </Layout.AnnotatedSection>\n          <Layout.AnnotatedSection\n            title=\"Blocks\"\n            description=\"optional setting\"\n          >\n            {activeFields.includes(\"blocks\") && (\n              <Blocks handleModalChange={this.handleModalChange} />\n            )}\n          </Layout.AnnotatedSection>\n          <Layout.AnnotatedSection>\n            <Card sectioned>\n              <Stack distribution=\"center\" alignment=\"trailing\">\n                <RenderSchemaModal\n                  activeFields={Object.keys(types[\"section\"])}\n                />\n              </Stack>\n            </Card>\n          </Layout.AnnotatedSection>\n        </Layout>\n\n        <SettingsModal />\n      </Page>\n    );\n  }\n}\n\nconst mapStateToProps = (state) => ({\n  storeSettings: state.settings,\n  modal: state.modal,\n  error: state.error,\n  fields: state.fields,\n  mainFields: state.fields.store,\n});\n\nconst mapDispatchToProps = (dispatch) => {\n  return {\n    setErrorState: (errorState) => dispatch({\n      type: \"SET_ERROR_STATE\",\n      errorState\n    }),\n    modalEdit: (itemDetails, index, id) => dispatch({\n      type: \"MODAL_ACTIVE\",\n      modalActive: true,\n      modalType: \"edit\",\n      item: itemDetails,\n      index,\n      id,          \n    }),\n    modalAdd: (id) => dispatch({\n      type: \"MODAL_ACTIVE\",\n      modalActive: true,\n      modalType: \"add\",\n      item: null,\n      index: null,\n      id,\n    }),\n    modalDuplicate: (itemDetails, id) => dispatch({\n      type: \"MODAL_ACTIVE\",\n      modalActive: true,\n      modalType: \"duplicate\",\n      item: itemDetails,\n      index: null,\n      id,      \n    }),\n    updateValue: (field, value) => dispatch({\n      type: \"UPDATE_FIELD\",\n      id: \"store\",\n      field,\n      value,    \n    })\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(PageLayout);\n","import { createStore, combineReducers } from 'redux'\nconst arrayMove = require(\"array-move\");\n\nfunction fields (state = { store: {} }, { type, id = 'store', field, value }) {\n  const defaultState = { ...state };\n\n  switch (type) {\n    case 'ADD_FIELDS':\n      defaultState[id] = {}\n      return defaultState\n    case 'DELETE_ALL_FIELDS':\n      delete defaultState[id]\n      return defaultState      \n    case 'UPDATE_FIELD':\n      defaultState[id][field] = value\n      return defaultState\n    default:\n      return state\n  }\n}\n\nfunction settings (state = { store: [] }, { type, setting, id = 'store', index, destination }) {\n  const defaultState = { ...state };\n\n  switch (type) {\n    case 'ADD_SETTING':\n      setting && defaultState[id]\n        ? defaultState[id].push(setting)\n        : defaultState[id] = []\n      return defaultState\n    case 'UPDATE_SETTING':\n      defaultState[id][index] = setting\n      return defaultState\n    case 'DELETE_SETTING':\n      defaultState[id].splice(index, 1)\n      return defaultState\n    case 'DELETE_ALL_SETTINGS':\n      delete defaultState[id]\n      return defaultState\n    case 'MOVE_SETTING':\n      const movedSettings = arrayMove(defaultState[id], index, destination)\n      defaultState[id] = movedSettings\n      return defaultState\n\n    default: return state\n  }\n}\n\nfunction modal (state = { modalActive: false }, action) {\n  switch (action.type) {\n    case 'MODAL_ACTIVE':\n      return {\n        modalActive: action.modalActive,\n        modalType: action.modalType,\n        item: action.item,\n        index: action.index,\n        id: action.id,\n        blockIndex: action.blockIndex\n      }\n    default: return state\n  }\n}\n\nfunction blocks (state = [], action) {\n  const updatedState = [ ...state ]\n  switch (action.type) {\n    case 'ADD_BLOCK': \n      updatedState.push({ id: `block_${Date.now()}`, isOpen: true })\n      return updatedState\n    case 'TOGGLE_BLOCK':\n      // const updatedIndex = updatedState.indexOf(updatedState.find(block => block.id === action.id))\n      updatedState[action.index].isOpen = action.setting\n      return updatedState\n    case 'DELETE_BLOCK':\n      updatedState.splice(action.index, 1)\n      return updatedState\n    default: return state    \n  }\n}\n\nfunction error (state = { errorState: false }, action) {\n  switch (action.type) {\n    case 'SET_ERROR_STATE':\n      return {\n        errorState: action.errorState\n      }\n    default: return state\n  }\n}\n\nconst reducer = combineReducers({ settings, modal, error, blocks, fields })\nconst store = createStore(\n  reducer, {}, window.__REDUX_DEVTOOLS_EXTENSION__ && window.__REDUX_DEVTOOLS_EXTENSION__())\n\nexport default store","import React, { Component } from \"react\";\nimport { Provider } from \"react-redux\";\nimport { AppProvider } from \"@shopify/polaris\";\nimport \"@shopify/polaris/styles.css\";\nimport PageLayout from \"./PageLayout\";\nimport store from \"../store\";\n\nclass App extends Component {\n  render() {\n    return (\n      <Provider store={store}>\n        <AppProvider>\n          <PageLayout />\n        </AppProvider>\n      </Provider>\n    );\n  }\n}\n\nexport default App;\n","import React from \"react\";\nimport { render } from \"react-dom\";\nimport App from \"./components/App\";\n\nrender(<App />, document.querySelector(\"#main\"));\n"],"sourceRoot":""}